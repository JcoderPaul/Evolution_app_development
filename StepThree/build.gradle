plugins {
    id 'java'
    id "io.freefair.lombok" version "8.3"
    id "com.github.ben-manes.versions" version "0.51.0"
    id 'war'
    id "io.freefair.aspectj.post-compile-weaving" version "8.10.2"
}

war {
    enabled=true
}

group 'me.oldboy'
version '1.0-SNAPSHOT'

apply from: 'version.gradle'

repositories {
    mavenCentral()
    gradlePluginPortal()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

dependencies {
    /* Подключим БД PostgeSQL и миграционный фреймворк Liquibase */
    implementation "org.postgresql:postgresql:${versions.postgres}"
    implementation "org.liquibase:liquibase-core:${versions.liquibase}"
    /* Подключим Hibernate */
    implementation "org.hibernate:hibernate-core:${versions.hibernate}"
    implementation "org.hibernate:hibernate-envers:${versions.hibernate}"
    implementation "org.hibernate:hibernate-jcache:${versions.hibernate}"
    compileOnly "org.hibernate:hibernate-annotations:${versions.hibernate_annotations}"
    /* Подключим валидатор */
    implementation "org.hibernate:hibernate-validator:${versions.validator}"
    implementation "javax.el:javax.el-api:${versions.javax}"
    implementation "org.glassfish:javax.el:${versions.javax}"
    /* Подключим log4j */
    implementation "org.slf4j:slf4j-log4j12:${versions.slf4j_log4j_binding}"
    /* Подключим библиотеку Mapstruct */
    implementation "org.projectlombok:lombok-mapstruct-binding:${versions.lombok_map_struct}"
    implementation "org.mapstruct:mapstruct:${versions.mapstruct}"
    implementation "org.mapstruct:mapstruct-processor:${versions.mapstruct}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${versions.mapstruct}",
                        "org.projectlombok:lombok-mapstruct-binding:${versions.lombok_map_struct}"
    /* Подключим сервлеты */
    implementation "jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:${versions.jakarta_jsp_jstl_api}"
    compileOnly "jakarta.servlet:jakarta.servlet-api:${versions.jakarta_servlet_api}"
    compileOnly "jakarta.servlet.jsp:jakarta.servlet.jsp-api:${versions.jakarta_jsp_api}"
    /* Подключим JSON Web Token (JWT) */
    implementation "io.jsonwebtoken:jjwt-root:${versions.jjwt}"
    implementation "io.jsonwebtoken:jjwt-api:${versions.jjwt}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${versions.jjwt}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${versions.jjwt}"
    /* Подключим функционал AOP */
    runtimeOnly "org.aspectj:aspectjweaver:${versions.aspectj}"
    runtimeOnly "org.aspectj:aspectjrt:${versions.aspectj}"
    implementation "org.aspectj:aspectjtools:${versions.aspectj}"
    /* Подключим функционал Jackson ObjectMapper */
    implementation "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${versions.jackson}"
    /* Подключим все для тестов Testcontainers */
    testImplementation "org.testcontainers:postgresql:${versions.testcontainers}"
    testImplementation "org.testcontainers:junit-jupiter:${versions.testcontainers}"
    /* Подключим Junit5 */
    testImplementation "org.junit.jupiter:junit-jupiter-api:${versions.jupiter}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.jupiter}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${versions.jupiter}"
    /* Подключим Mockito и AssertJ */
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testRuntimeOnly "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "org.mockito:mockito-junit-jupiter:${versions.mockito}"
    testImplementation "org.assertj:assertj-core:${versions.assertj}"
    testRuntimeOnly "org.assertj:assertj-core:${versions.assertj}"
}

test {
    useJUnitPlatform()
}